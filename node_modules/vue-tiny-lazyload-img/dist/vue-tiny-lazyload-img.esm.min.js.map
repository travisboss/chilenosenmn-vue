{"version":3,"file":"vue-tiny-lazyload-img.esm.min.js","sources":["../src/constant.js","../src/lazyObserver.js","../src/vue-tiny-lazyload-img.js"],"sourcesContent":["const _V_LOADING = 'v-lazy-loading'\nconst _V_LOADED = 'v-lazy-loaded'\nconst _V_ERROR = 'v-lazy-error'\n\nexport default {\n  _V_LOADING,\n  _V_LOADED,\n  _V_ERROR\n}\n","import constant from './constant'\n\nlet lazyImageObserver = null\n\nconst clearDataSrc = (lazyImage, stateClass) => {\n  lazyImage.classList.add(stateClass)\n\n  lazyImage.removeAttribute('data-src')\n  lazyImage.removeAttribute('data-err')\n}\n\nif ('IntersectionObserver' in window) {\n  lazyImageObserver = new IntersectionObserver(function (entries, observer) {\n    entries.forEach(function (entry) {\n      if (entry.isIntersecting) {\n        const lazyImage = entry.target\n        lazyImage.classList.add(constant._V_LOADING)\n\n        const dataSrc = lazyImage.dataset.src\n        const dataErr = lazyImage.dataset.err\n\n        var newImage = new Image()\n        newImage.src = dataSrc\n        // when success\n        newImage.onload = function () {\n          lazyImage.classList.remove(constant._V_LOADING)\n\n          if (dataSrc) {\n            lazyImage.src = dataSrc\n            clearDataSrc(lazyImage, constant._V_LOADED)\n          }\n        }\n        // when error\n        newImage.onerror = function () {\n          lazyImage.classList.remove(constant._V_LOADING)\n\n          if (dataErr) {\n            lazyImage.src = dataErr\n            clearDataSrc(lazyImage, constant._V_ERROR)\n          }\n        }\n\n        lazyImageObserver.unobserve(lazyImage)\n      }\n    })\n  })\n}\n\nexport default lazyImageObserver\n","import lazyImageObserver from './lazyObserver'\nimport constant from './constant'\n\nconst plugin = {\n  install: Vue => {\n    Vue.directive('lazyload', {\n      bind (el) {\n        if ('IntersectionObserver' in window) {\n          lazyImageObserver.observe(el)\n        }\n      },\n      componentUpdated (el) {\n        // when image changed\n        // expecting has been loaded image before\n        if ('IntersectionObserver' in window) {\n          if (el.classList.contains(constant._V_LOADED)) {\n            lazyImageObserver.observe(el)\n          }\n        }\n      }\n    })\n  }\n}\n\nexport default plugin\n"],"names":["lazyImageObserver","clearDataSrc","lazyImage","stateClass","classList","add","removeAttribute","window","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","target","constant","dataSrc","dataset","src","dataErr","err","newImage","Image","onload","remove","onerror","unobserve","install","Vue","directive","bind","el","observe","componentUpdated","contains"],"mappings":"AAAA,MAAmB,mBACD,kBACD,eCAbA,EAAoB,KAElBC,EAAe,SAACC,EAAWC,GAC/BD,EAAUE,UAAUC,IAAIF,GAExBD,EAAUI,gBAAgB,YAC1BJ,EAAUI,gBAAgB,aAGxB,yBAA0BC,SAC5BP,EAAoB,IAAIQ,qBAAqB,SAAUC,EAASC,GAC9DD,EAAQE,QAAQ,SAAUC,MACpBA,EAAMC,eAAgB,KAClBX,EAAYU,EAAME,OACxBZ,EAAUE,UAAUC,IAAIU,OAElBC,EAAUd,EAAUe,QAAQC,IAC5BC,EAAUjB,EAAUe,QAAQG,IAE9BC,EAAW,IAAIC,MACnBD,EAASH,IAAMF,EAEfK,EAASE,OAAS,WAChBrB,EAAUE,UAAUoB,OAAOT,GAEvBC,IACFd,EAAUgB,IAAMF,EAChBf,EAAaC,EAAWa,KAI5BM,EAASI,QAAU,WACjBvB,EAAUE,UAAUoB,OAAOT,GAEvBI,IACFjB,EAAUgB,IAAMC,EAChBlB,EAAaC,EAAWa,KAI5Bf,EAAkB0B,UAAUxB,SAMpC,MAAeF,gBC7CA,CACb2B,QAAS,SAAAC,GACPA,EAAIC,UAAU,WAAY,CACxBC,cAAMC,GACA,yBAA0BxB,QAC5BP,EAAkBgC,QAAQD,IAG9BE,0BAAkBF,GAGZ,yBAA0BxB,QACxBwB,EAAG3B,UAAU8B,SAASnB,IACxBf,EAAkBgC,QAAQD"}